题目描述
书籍的长宽都是整数对应，如果书A的长宽度都比B长宽大时，则允许将B排列放在A上面
现有一组规格的书籍，书籍叠放时要求书籍不能做旋转，请计算最多能有多少个规格书籍能叠放在一起

输入
[[16,15], [13, 12], [15, 14]]

输出
3

说明
这里代表有3本书，第1本长宽分别为16和15，第2本长宽为13和12，第3本长宽为15和14，它们可以按照 [13, 12],[15, 14],[16,15] 的顺序堆叠，所以输出3

【分析】
————————————————
const books = [
  [20, 16],
  [15, 12],
  [10, 10],
  [8, 5],
  [9, 5],
  [9, 10]
];
// 对输入的数组按照长度、宽度的大小进行排序
books.sort((a, b) => {
  if (a[0] !== b[0]) {
    return a[0] - b[0];
  } else {
    return a[1] - b[1];
  }
});
let dp = [];
let maxLen = 1;
for (let i = 0; i < books.length; i++) {
  // 每一项表示该书底下能叠起来的书的最大值，默认为1，即自己
  dp[i] = 1;
  // 要新加的书的长度和宽度
  let curBook = books[i];
  for (let j = i; j < books.length; j++) {
    // 要比较的书的长度和宽度
    let nexBook = books[j];
    if (curBook[0] < nexBook[0] && curBook[1] < nexBook[1]) {
      // 新加的书的长宽均大于当前书，说明这本书可以加在当前书的递增序列之后
      dp[i] = dp[i] + 1;
      curBook = books[j];
    }
  }
  //  更新最大值结果
  maxLen = Math.max(maxLen, dp[i]);
  // 如果当前叠加是length最大的，则退出循环
  if (dp[i] >= books.length - i) {
    break;
  }

}
console.log(maxLen)
