【分班问题】

幼儿园两个班的小朋友在排队时混在了一起，每位小朋友都知道自己是否与前面一位小朋友同班，请你帮忙把同班的小朋友找出来。
小朋友的编号是整数，与前一位小朋友同班用Y表示，不同班用N表示。
学生序号范围(0,999]，如果输入不合法则打印ERROR。
输入描述：

输入为空格分开的小朋友编号和是否同班标志。
输出描述：

输出为两行，每一行记录一个班小朋友的编号，编号用空格分开，且：
1.编号需按照升序排列。
2.若只有一个班的小朋友，第二行为空行。
示例1 输入输出示例仅供调试，后台判题数据一般不包含示例

输入

1/N 2/Y 3/N 4/Y

输出

1 2

3 4

示例2 输入输出示例仅供调试，后台判题数据一般不包含示例

输入

1/N 2/Y 3/N 4/Y 5/Y

输出

1 2

3 4 5


class Node {
  value; // 当前的值 0-999
  isTrue; // 是否和前一个人是一个班 Y N
  classIndex; // 对应班级 first sec
  constructor(value, isTrue, classIndex) {
    this.value = value;
    this.isTrue = isTrue;
    this.classIndex = classIndex;
  }
}

function splitInput(str) {
  const classMapPeo = {
    first: [],
    sec: []
  }
  if (str) {
    // 1/N 2/Y 3/N 4/Y
    const strArr = str.split(' ');
    const firstNode = strArr[0].split('/');
    if (firstNode[0] < 0 || firstNode[0] > 999) {
      return 'ERROR';
    }
    classMapPeo.first.push(firstNode[0]);
    let preNode = new Node(firstNode[0], firstNode[1], 'first');
    for (let i = 1; i < strArr.length; i++) {
      const item = strArr[i].split('/');
      if (item[0] < 0 || item[0] > 999) {
        return 'ERROR';
      }
      if (item[1] === 'Y') {
        preNode = new Node(item[0], item[1], preNode.classIndex);
        classMapPeo[preNode.classIndex].push(item[0]);
      } else if (item[1] === 'N') {
        if (preNode.classIndex === 'first') {
          classMapPeo.sec.push(item[0]);
          preNode = new Node(item[0], item[1], 'sec');
        } else {
          classMapPeo.first.push(item[0]);
          preNode = new Node(item[0], item[1], 'first');
        }
      }
    }
  } else {
    return 'ERROR';
  }
  return classMapPeo;
}

const result = splitInput('132/N 21/Y 3/N 4/Y');
if (result === 'ERROR') {
  console.log('ERROR')
} else {
  Object.values(result).forEach(item => {
    const itemArr = item.sort((a, b) => a - b > 0 ? 0 : -1);
    console.log(itemArr.join(' '))
  })
}
