双十一众多商品进行打折销售，小明想购买自己心仪的一些物品，但由于受购买资金限制，所以他决定从众多心仪商品中购买三件，而且想尽可能的花完资金。

现在请你设计一个程序帮助小明计算尽可能花费的最大资金数额。

输入描述:

输入第一行为一维整型数组M，数组长度小于100，数组元素记录单个商品的价格，单个商品价格小于1000。
输入第二行为购买资金的额度R，R小于100000。
输出描述:

输出为满足上述条件的最大花费额度。
注意：

如果不存在满足上述条件的商品，请返回-1。
示例1  输入输出示例仅供调试，后台判题数据一般不包含示例

输入

23,26,36,27

78

输出

76

说明

金额23、26和27相加得到76，而且最接近且小于输入金额78。

示例2  输入输出示例仅供调试，后台判题数据一般不包含示例

输入

23,30,40

26

输出

-1

说明

因为输入的商品，无法组合出来满足三件之和小于26.故返回-1。
备注:

输入格式是正确的，无需考虑格式错误的情况。

——————————python————————————————
line1 = input();
line2 = input();
line1_list = line1.strip().split(',');
money = int(line2.strip());

l = len(line1_list);
current = -1;
for i in Range(l):
  for j in Range(i + 1, 1):
  for k in Range(j + 1, 1):
  a, b, c = line1_list[i], line1_list[j], line1_list[k]
d = a + b + c;
if d > money:
  continue
if d > current:
  current = d
print(current)
——————————————————————————————

——————————————————————js————————————————————————————————
let line = readline();
let target = readline();
let nums = line.split(' ').map(Number);
let n = nums.length;
let money = parseInt(target);
let sum = 0;
nums.sort((a, b) => a - b);
console.log(nums);
let res = [];
for (let i = 0; i < n - 2; i++) {
    res.push(nums[i] + nums[i + 1] + nums[i + 2]);//把重新排完序的数组每三项求和存入新数组
}
res.sort((a, b) => a - b);//不用排序也是从小到大
console.log(res);
if (res[0] > money) {//当第一个元素大于money目标金额说明买不了三件在money内
    console.log('-1');
} else {
    for (let i = 0; i < res.length; i++) {
        if (res[i] > money) {//逐个判断，当出现大于目标金额的时候，返回前一个元素，即是最大金额
            console.log(res[i - 1]);
        }
    }
}

——————————————————————————————c——————————————————————————————
#include <stdio.h>
int main(){
    char ch;
    int count=0;                  //遍历指针
    int M[100]={0};               //存储数组
    int sum = 0;                  //局部计算和
    int max_spend = 0;            //最大花费

    do{
        scanf("%d",&M[count++]);
    }while((ch=getchar())!= '\n');// 这里用来判断是否输入了回车
    printf("%d\n",count);

    int R;                        //资金总额
    scanf("%d",&R);
                                  //枚举
    for(int i = 0; i < count; i++)
        for(int j=i+1; j < count; j++)
            for(int k=j+1; k < count; k++){
                sum = M[i]+M[j]+M[k];
                printf("sum = %d M[%d] + M[%d] + M[%d]\n",sum,i,j,k);//打印枚举结果
                if(sum <= R){
                    max_spend = sum > max_spend? sum : max_spend;
                }
            }
    if(max_spend == 0){
       return -1;
    }
    printf("%d",max_spend);
    return 0;

}

