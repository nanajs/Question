题目描述

【水仙花数】

给定非空字符串s，将该字符串分割成一些子串，使每个子串的ASCII码值的和均为水仙花数。

1、若分割不成功，则返回0；

2、若分割成功且分割结果不唯一，则返回-1；

3、若分割成功且分割结果唯一，则返回分割后子串的数目。

输入描述

输入字符串的最大长度为200

输出描述

根据题目描述中情况，返回相应的结果。

示例1 输入输出示例仅供调试，后台判题数据一般不包含示例

输入

abc

输出

0

说明

分割不成功

示例2
输入
f3@d5a8
输出
-1
说明
分割成功但分割结果不唯一，可以分割为两组，一组’f3’和’@d5a8’，另外一组’f3@d5’和’a8’

示例3
输入
AXdddF
输出
2
说明
分割成功且分割结果唯一，可以分割成’AX’和’dddF’(370)两个子串

备注
“水仙花数”是指一个三位数，每位上数字的立方和等于该数字本身，如371是’水仙花数’，因371=33+73+1^3

————————————————————————————————————————————————
# 1.提取字符及其ASCII码
s = input()
ls =list(s)
nums = []
for i in s:
    nums.append(ord(i))
# 2.列出所有三位数的水仙花数
narcissus_nums = []
for i in range(100,1000):
    i = str(i)
    if int(i[0])**3+int(i[1])**3+int(i[2])**3 == int(i):
        narcissus_nums.append(int(i))
# 3.回溯
def backtrack(ls,nums,stk):
    if sum(nums) in narcissus_nums:
        stk.append("".join(ls))
        res.append(stk[:])
        stk.pop()
        return
    for i in range(1,len(nums)):
        if sum(nums[:i]) in narcissus_nums:
            stk.append("".join(ls[:i]))
            backtrack(ls[i:],nums[i:],stk)
            stk.pop()
res = [] # 只有满足条件的分组才会存入res
backtrack(ls,nums,[])
# 4.输出
if len(res) == 0: # 分割不成功，res为空
    print(0)
elif len(res) == 1: # 分割唯一，输出子串数
    print(len(res[0]))
else: # 分割不唯一，事实上 len(res) > 1
    print(-1)
————————————————————————————————————————————————————————
/*
    AXdddF 2
    f3@d5a8 -1
    abc  0
    */
    const inputArr = 'AXdddF'.split('');
    const inputLen = inputArr.length;
    //  获取ASCII码
    const nums = [];
    for (let i = 0; i < inputLen; i++) {
      nums.push(inputArr[i].charCodeAt(0))
    }
    // 列出水仙花数,一个三位数，各个位数立方之和等于当前数
    const filterNum = [];
    for (let i = 100; i < 1000; i++) {
      const item = String(i);
      if (Math.pow(item[0], 3) + Math.pow(item[1], 3) + Math.pow(item[2], 3) === i) {
        filterNum.push(i);
      }
    }

    function addNum(nums) {
      let count = 0;
      for (let i = 0; i < nums.length; i++) {
        count += nums[i];
      }
      return count;
    }

    //
    const strArrs = [];

    function isStr(strArr, strMapNum, stk) {
      if (filterNum.includes(addNum(strMapNum))) {
        stk.push(strArr.join(''));
        strArrs.push(stk);
        stk = [];
        return;
      }
      for (let i = 0; i < strMapNum.length; i++) {
        if (filterNum.includes(addNum(strMapNum.slice(0, i)))) {
          stk.push(strArr.slice(0, i).join(''));
          isStr(strArr.slice(i, strArr.length), strMapNum.slice(i, strMapNum.length), stk)
          stk = [];
        }
      }
    }
    isStr(inputArr, nums, []);
    console.log(strArrs)
    if (strArrs.length === 0) {
      console.log(0)
    } else if (strArrs.length === 1) {
      console.log(strArrs[0].length)
    } else {
      console.log(-1)
    }
